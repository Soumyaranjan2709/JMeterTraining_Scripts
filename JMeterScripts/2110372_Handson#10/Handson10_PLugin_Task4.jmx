<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="myString" elementType="Argument">
            <stringProp name="Argument.name">myString</stringProp>
            <stringProp name="Argument.value">This is My Test String</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler_${__base64Encode(Performance,Base64Encoded)}">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">String productList = &quot;MobilePhone, Laptop, Television,   Refrigerator, AirCooler&quot;
vars.put(&quot;ProductList&quot;, productList)

String[] products = vars.get(&quot;ProductList&quot;).split(&quot;, &quot;)
int randomIndex = new Random().nextInt(products.length)

String randomProduct = products[randomIndex]
vars.put(&quot;RandomProduct&quot;, products[randomIndex])

log.info(&quot;RandomProduct: &quot;+ randomProduct)
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler_${__base64Decode(Performance,Base64Decoded)}">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// Change all the values in ProductList from Lowercase to Uppercase
String[] products = vars.get(&quot;ProductList&quot;).split(&quot;, &quot;)
for (int i = 0; i &lt; products.length; i++) {
   products[i] = products[i].toUpperCase()
}

String productListUpper = String.join(&quot;, &quot;, products)
log.info(&quot;productListUpper is : &quot;+ productListUpper)
vars.put(&quot;ProductListUpper&quot;, productListUpper)

// Replace the data &quot;AirCooler&quot; with &quot;AirConditioner&quot;
String productList = vars.get(&quot;ProductListUpper&quot;).replace(&quot;AIRCOOLER&quot;, &quot;AIRCONDITIONER&quot;)
log.info(&quot;productList is : &quot;+ productList)
vars.put(&quot;ProductListReplaced&quot;, productList)

// Print only &quot;My&quot; from the String - &quot;This is My Test String&quot;
String myString = vars.get(&quot;myString&quot;)

String mySubstring = org.apache.jmeter.functions.Functions.eval(&quot;${__substring(${myString},8,10)}&quot;);
log.info(&quot;mySubstring is: &quot;+ mySubstring)

vars.put(&quot;mySubstring&quot;, mySubstring)</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
